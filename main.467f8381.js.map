{"version":3,"sources":["scripts/main.js"],"names":["body","document","querySelector","start","rows","querySelectorAll","cells","score","messages","winMessage","loseMessage","field","gameOver","rowsPerField","cellsPerRow","getRandomCellNumber","Math","floor","random","getRandomValue","getRandomCell","cellNumber","cellValue","cell","classList","length","add","textContent","deleteZeroes","row","filter","slide","newRow","i","push","changeCell","count","className","changeCellinRow","col","children","changeCellInColumn","moveCellsToLeft","moveCellsToRight","reverse","moveCellsUp","column","newColumn","moveCellsDown","isImpossibleMove","addEventListener","contains","replace","keybordEvent","boardClone","JSON","stringify","key","remove","some","forEach","message"],"mappings":"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","file":"main.467f8381.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst body = document.querySelector('body');\nconst start = body.querySelector('.button');\nconst rows = body.querySelectorAll('.field-row');\nconst cells = body.querySelectorAll('.field-cell');\nconst score = body.querySelector('.game-score');\nconst messages = body.querySelectorAll('.message');\nconst winMessage = body.querySelector('.message-win');\nconst loseMessage = body.querySelector('.message-lose');\n\nlet field = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet gameOver = false;\n\nconst rowsPerField = 4;\nconst cellsPerRow = 4;\n\nstart.addEventListener('click', () => {\n  if (start.classList.contains('start')) {\n    start.classList.replace('start', 'restart');\n    start.textContent = 'Restart';\n\n    document.addEventListener('keydown', (keybordEvent) => {\n      if (gameOver === true) {\n        return;\n      }\n\n      const boardClone = JSON.stringify(field);\n\n      switch (keybordEvent.key) {\n        case 'ArrowLeft':\n          moveCellsToLeft();\n          break;\n\n        case 'ArrowRight':\n          moveCellsToRight();\n          break;\n\n        case 'ArrowUp':\n          moveCellsUp();\n          break;\n\n        case 'ArrowDown':\n          moveCellsDown();\n          break;\n      };\n\n      if (isImpossibleMove()) {\n        loseMessage.classList.remove('hidden');\n      }\n\n      if (boardClone === JSON.stringify(field)) {\n        return;\n      }\n\n      if ([...cells].some(cell =>\n        cell.classList.contains('field-cell--2048'))) {\n        gameOver = true;\n        winMessage.classList.remove('hidden');\n      }\n\n      getRandomCell();\n    });\n  }\n\n  cells.forEach(cell => {\n    cell.className = '';\n    cell.classList.add(`field-cell`);\n    cell.textContent = '';\n  });\n\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  gameOver = false;\n\n  [...messages].forEach(message => message.classList.add('hidden'));\n\n  score.textContent = 0;\n\n  getRandomCell();\n  getRandomCell();\n});\n\nfunction getRandomCellNumber() {\n  return Math.floor(Math.random() * 16);\n}\n\nfunction getRandomValue() {\n  return (Math.random() >= 0.9) ? 4 : 2;\n}\n\nfunction getRandomCell() {\n  const cellNumber = getRandomCellNumber();\n  const cellValue = getRandomValue();\n  const cell = cells[cellNumber];\n\n  if (cell.classList.length < 2) {\n    field[Math.floor(cellNumber / 4)][cellNumber % 4] = cellValue;\n    cell.classList.add(`field-cell--${cellValue}`);\n    cell.textContent = `${cellValue}`;\n  } else {\n    getRandomCell();\n  }\n}\n\nfunction deleteZeroes(row) {\n  return row.filter(cell => cell !== 0);\n}\n\nfunction slide(row) {\n  let newRow = deleteZeroes(row);\n\n  for (let i = 0; i < newRow.length; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score.textContent = +score.textContent + newRow[i];\n      i++;\n    }\n  }\n\n  newRow = deleteZeroes(newRow);\n\n  while (newRow.length < cellsPerRow) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction changeCell(cell, count) {\n  cell.className = '';\n  cell.classList.add('field-cell');\n\n  if (count === 0) {\n    cell.textContent = '';\n\n    return;\n  }\n\n  cell.textContent = `${count}`;\n  cell.classList.add(`field-cell--${count}`);\n}\n\nfunction changeCellinRow(row) {\n  for (let col = 0; col < cellsPerRow; col++) {\n    const cell = rows[row].children[col];\n    const count = field[row][col];\n\n    changeCell(cell, count);\n  }\n}\n\nfunction changeCellInColumn(col) {\n  for (let row = 0; row < rowsPerField; row++) {\n    const cell = rows[row].children[col];\n    const count = field[row][col];\n\n    changeCell(cell, count);\n  }\n}\n\nfunction moveCellsToLeft() {\n  for (let row = 0; row < rowsPerField; row++) {\n    const newRow = slide(field[row]);\n\n    field[row] = newRow;\n\n    changeCellinRow(row);\n  }\n}\n\nfunction moveCellsToRight() {\n  for (let row = 0; row < rowsPerField; row++) {\n    const newRow = slide(field[row].reverse()).reverse();\n\n    field[row] = newRow;\n\n    changeCellinRow(row);\n  }\n}\n\nfunction moveCellsUp() {\n  for (let column = 0; column < cellsPerRow; column++) {\n    let newColumn = [\n      field[0][column],\n      field[1][column],\n      field[2][column],\n      field[3][column],\n    ];\n\n    newColumn = slide(newColumn);\n\n    field[0][column] = newColumn[0];\n    field[1][column] = newColumn[1];\n    field[2][column] = newColumn[2];\n    field[3][column] = newColumn[3];\n\n    changeCellInColumn(column);\n  }\n}\n\nfunction moveCellsDown() {\n  for (let column = 0; column < cellsPerRow; column++) {\n    let newColumn = [\n      field[0][column],\n      field[1][column],\n      field[2][column],\n      field[3][column],\n    ];\n\n    newColumn = slide(newColumn.reverse()).reverse();\n\n    field[0][column] = newColumn[0];\n    field[1][column] = newColumn[1];\n    field[2][column] = newColumn[2];\n    field[3][column] = newColumn[3];\n\n    changeCellInColumn(column);\n  }\n}\n\nfunction isImpossibleMove() {\n  for (let row = 0; row < rowsPerField; row++) {\n    const column = [\n      field[0][row],\n      field[1][row],\n      field[2][row],\n      field[3][row],\n    ];\n\n    for (let cell = 0; cell < cellsPerRow; cell++) {\n      if (\n        field[row][cell] === 0\n        || field[row][cell] === field[row][cell + 1]\n        || column[cell] === column[cell + 1]\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n"]}